앞으로의 방향? // 이 부분은 문제 해결 방안 부분에 쓰자(4주차부터)

기존 비전 알고리즘으로도 충분히 어렵지 않게 처리가 가능한 프로세스들, 예를들어
엣지추출, 관심영역 설정, 결과 계산, 결과 출력 들은 비전 알고리즘을 사용하여 처리를 하고, 반대로 어려운 프로세스들,
예를들면, 물체 분류(라벨링), 물체 분리, 물체 인식 등의 경우에는 학습 된 딥러닝 모델을 이용하여 프로그래밍 하는 방향이
이상적인 방향이라고 생각한다.
이걸 이번 프로젝트에 적용해 보면, 적당한 임곗값을 찾아 이진화 하는 즉 배경,solder,결함 이 세가지를 라벨처리하는 과정을
딥러닝 모델을 적용하여 처리하고 나머지 프로세스들은 비전 알고리즘을 이용해서 프로그래밍 할 예정이다.

- 세부 과정
 1) input 준비 // 전체사진 input 90장(ball 190영역) >> 약 17100장의 데이터를 일정한 크기(? x ?) 사진으로 저장.
 2) target 준비 // 정리 된 17100장의 사진에 대해 ideal하게 이진화 된 target 사진 준비(프로그래밍하여 준비,, 일일히 하면 너무 오래걸리니까)
 3) 학습 모델 seting 및 학습 // 70% 학습 데이터, 30% 테스트 데이터 intput : (? x ?, 0~255 사진) > (model) > output : (? x , 0~1 사진)
 4) 파이썬코드로 만들어진 inference를 C++ inference로 변환후 visual studio로 가져온다
 5) 딥러닝 모델을 이용한 검사 알고리즘을 정리하고, 이를 UI에서 사용할 수 있도록 코딩한다.
 

3/26
1) Matterport Mask RCNN 모델을 이용하여 학습,테스트를 진행 할 예정이다.
2) 프로젝트의 최종 목표는 이렇게 학습 된 모델 inference를 C++기반으로 불러와서 custom프로그램에서 동작하는 것이다.
3) 다음 사진은 미리 학습된 모델에 우리 프로젝트의 사진을 입력시켜 얻은 결과이다. 고양이로 판별된 모습을 볼 수 있다.
4) 현재 간단한 소스코드를 작성해서 전체사진을 볼영역으로 자르는 작업은 완료한 상태이다.
5) 다음 그림과 같은 라벨링 툴을 이용하여 데이터셋을 준비 할 예정이다.
6) 하지만 모델에 학습을 위한 파이프라인을 구축하기 위해서는 해당 모델에 맞는 데이터 형식을 맞추는것이 중요하다.
 - 우리가 가진 데이터 셋을 아래의 사진의 baloon, kaggle 과 같은 유명한 데이터 셋들과 동일한 구성을 갖게 해야 한다.
7) 현재 마주한 가장 큰 이슈는 바로 이 데이터 형식을 구성하는 것이고, 이에 대한 search와 공부가 필요하다.
 - 늦어도 열흘 안에는 적은 데이터라도 학습을 시켜보는 것을 목표로 하고 있습니다.
 - 그래야 그 이후에 다량의 데이터를 라벨링하는 작업을 시행할 수 있고, 그 이후의 시행착오에 대한 수정 작업또한 오래 걸릴 것이라고 생각하기 때문입니다.
 - ( 1. 이상현 연구원님, 2. 인프런 권철민 선생님께 메일, 질문을 남겼고 답변을 기다리는중이다.)
8) 이상현 연구원님 왈 : 커스텀 데이터 셋을 모델에 적합한 형식으로 바꾸고 학습시키는 과정은 석사 이상의 과정이다. 지금상황에서
하려면 1,2년은 걸릴 것이다. 즉 우리의 커스텀 데이터(.jpg)를 코랩에서 학습시킨다는 것은 사실상 불가능한 일이다.
그래서 지금 남은 희망은 supervisely에서 자동으로 데이터셋을 맞춰주고 학습시키는 방법이 유일하다.
이곳에서는 학습 후 가중치가 업데이트 된 모델을 다운로드 하는것도 가능하다.

* supervisely 플랫폼 학습 프로세스 
 1) 플랫폼에 사진 로딩
 2) 라벨링 작업 실시
 3) 아래의 컴퓨터 요구조건을 만족시켜야 한다.
  1. 리눅스OS Kernel3.10버전
  2. Docker Version 18.0
  3. GPU CUDA9.0
  4. NVIDIA-Docker Version 2.0
 4) 위의 조건을 만족했다면, bash cell을 연 후 특정 소스코드 copy and paste
 5) DTL로 이동 후 annotation.txt 파일을 복붙하여 train이미지 생성
 6) NN으로 이동 후 Mask R-CNN 모델 불러오기
 7) Let's train
 8) input project 지정
 9) train parameter 수정(안해도 됨), result title 지정(**모델)
 10) 손실 그래프를 본 후 test model 생성
 11) 모델 테스트
